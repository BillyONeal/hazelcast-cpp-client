
var index = lunr(function () {
    this.field('body');
    this.ref('url');
});

var documentTitles = {};



documentTitles["index.html#document-revision-history"] = "Document Revision History";
index.add({
    url: "index.html#document-revision-history",
    title: "Document Revision History",
    body: "# Document Revision History  This chapter lists the changes made to this document from the previous release.  &lt;br&gt;&lt;/br&gt; ![image](images/NoteSmall.jpg)***NOTE:*** *Please refer to the &lt;a href=\&quot;https://github.com/hazelcast/hazelcast-cpp-client/releases\&quot; target=\&quot;_blank\&quot;&gt;Release Notes&lt;/a&gt; for the new features, enhancements and fixes performed for each Hazelcast C++ Client release.*  &lt;br&gt;&lt;/br&gt;  |Chapter|Section|Description| |:-------|:-------|:-----------| |[Chapter 2 - C++ Client](#c-client)||Added new sections [Custom Serialization](#custom-serialization) and [Raw Pointer API](#raw-pointer-api).|    &lt;br&gt; &lt;/br&gt;        "
});

documentTitles["index.html#c-client"] = "C++ Client";
index.add({
    url: "index.html#c-client",
    title: "C++ Client",
    body: "# C++ Client   You can use Native C++ Client to connect to Hazelcast cluster members and perform almost all operations that a member can perform. Clients differ from members in that clients do not hold data. The C++ Client is by default a smart client, i.e., it knows where the data is and asks directly for the correct member. You can disable this feature (using the `ClientConfig::setSmart` method) if you do not want the clients to connect to every member.  The features of C++ Clients are listed below:  - Access to distributed data structures (IMap, IQueue, MultiMap, ITopic, etc.). - Access to transactional distributed data structures (TransactionalMap, TransactionalQueue, etc.). - Ability to add cluster listeners to a cluster and entry/item listeners to distributed data structures. - Distributed synchronization mechanisms with ILock, ISemaphore and ICountDownLatch.   "
});

documentTitles["index.html#setting-up-c-client"] = "Setting Up C++ Client";
index.add({
    url: "index.html#setting-up-c-client",
    title: "Setting Up C++ Client",
    body: "## Setting Up C++ Client  Hazelcast C++ Client is shipped with 32/64 bit, shared and static libraries. You only need to include the boost *shared_ptr.hpp* header in your compilation since the API makes use of the boost `shared_ptr`.   The downloaded release folder consists of:  - Mac_64/ - Windows_32/ - Windows_64/ - Linux_32/ - Linux_64/ - docs/ *(HTML Doxygen documents are here)*   Each of the folders above contains the following:  - examples/ 	There are a number of examples in this folder for each feature. Each example produces an executable which you can run in a cluster. You may need to set the server IP addresses for the examples to run.  - hazelcast/ 	- lib/ =&gt; Contains both shared and static library of hazelcast. 	- include/ =&gt; Contains headers of client.  - external/ 	- include/ =&gt; Contains headers of dependencies. (boost::shared_ptr)  "
});

documentTitles["index.html#installing-c-client"] = "Installing C++ Client";
index.add({
    url: "index.html#installing-c-client",
    title: "Installing C++ Client",
    body: "## Installing C++ Client  The C++ Client is tested on Linux 32/64-bit, Mac 64-bit and Windows 32/64-bit machines. For each of the headers above, it is assumed that you are in the correct folder for your platform. Folders are Mac_64, Windows_32, Windows_64, Linux_32 or Linux_64.  "
});

documentTitles["index.html#compiling-c-client"] = "Compiling C++ Client";
index.add({
    url: "index.html#compiling-c-client",
    title: "Compiling C++ Client",
    body: "## Compiling C++ Client  For compilation, you need to include the `hazelcast/include` and `external/include` folders in your distribution. You also need to link your application to the appropriate static or shared library.  "
});

documentTitles["index.html#linux-c-client"] = "Linux C++ Client";
index.add({
    url: "index.html#linux-c-client",
    title: "Linux C++ Client",
    body: "### Linux C++ Client  For Linux, there are two distributions: 32 bit and 64 bit.  Here is an example script to build with static library:  `g++ main.cpp -pthread -I./external/include -I./hazelcast/include       ./hazelcast/lib/libHazelcastClientStatic_64.a`  Here is an example script to build with shared library:  `g++ main.cpp -lpthread -Wl,â€“no-as-needed -lrt -I./external/include -I./hazelcast/include -L./hazelcast/lib -lHazelcastClientShared_64`  "
});

documentTitles["index.html#mac-c-client"] = "Mac C++ Client";
index.add({
    url: "index.html#mac-c-client",
    title: "Mac C++ Client",
    body: "### Mac C++ Client  For Mac, there is one distribution: 64 bit.  Here is an example script to build with static library:  `g++ main.cpp -I./external/include -I./hazelcast/include ./hazelcast/lib/libHazelcastClientStatic_64.a`  Here is an example script to build with shared library:  `g++ main.cpp -I./external/include -I./hazelcast/include -L./hazelcast/lib -lHazelcastClientShared_64`  "
});

documentTitles["index.html#windows-c-client"] = "Windows C++ Client";
index.add({
    url: "index.html#windows-c-client",
    title: "Windows C++ Client",
    body: "### Windows C++ Client  For Windows, there are two distributions; 32 bit and 64 bit. The static library is located in a folder named \&quot;static\&quot; while the dynamic library(dll) is in the folder named as \&quot;shared\&quot;.  When compiling for Windows environment the user should specify one of the following flags:     HAZELCAST_USE_STATIC: You want the application to use the static Hazelcast library.     HAZELCAST_USE_SHARED: You want the application to use the shared Hazelcast library.  "
});

documentTitles["index.html#serialization-support"] = "Serialization Support";
index.add({
    url: "index.html#serialization-support",
    title: "Serialization Support",
    body: "## Serialization Support  C++ client supports the following types of object serializations:  - **Built-in primitive types**: Some primitive types have built-in support for serialization. These are `char`, `unsigned char` (`byte`), `bool`, `short`, `int`, `long`, `float`, `double`, `stl string`and vector of these primitive types.  - **IdentifiedDataSerializable**: This interface enables a fast serialization by providing a unique factory and class IDs. It requires the server side class as well. - **Portable Serialization**: This serialization carries the meta data for the object structure. If server side deserialization is not needed, you do not need to prepare the server side implementation. - **Custom Serialization**: This serialization allows you to use an external custom serialization, e.g., Google's Protocol Buffers. It provides serialization support without modifying your existing libraries where object classes exist.   "
});

documentTitles["index.html#custom-serialization"] = "Custom Serialization";
index.add({
    url: "index.html#custom-serialization",
    title: "Custom Serialization",
    body: "### Custom Serialization  If all of your classes that need to be serialized are inherited from the same class, you can use an implementation as shown in the example snippet below:  ``` class  MyCustomSerializer : public serialization::Serializer&lt;ExampleBaseClass&gt; {    public:       void write(serialization::ObjectDataOutput &amp; out, const ExampleBaseClass&amp; object);       void read(serialization::ObjectDataInput &amp; in, ExampleBaseClass&amp; object);       int getHazelcastTypeId() const;     }; ```      If your classes are not inherited from the same base class, you can use a serializer class with templates as shown in the example snippet below:  ``` template&lt;typename T&gt; class MyCustomSerializer : public serialization::Serializer&lt;T&gt; {        public:          void write(serialization::ObjectDataOutput &amp; out, const T&amp; object) {                             //.....          }          void read(serialization::ObjectDataInput &amp; in, T&amp; object) {                            //.....          }          int getHazelcastTypeId() const {                            //..          }     }; ```  Along with your serializer, you should provide the function `getHazelcastTypeId()` with the same namespace to which `ExampleBaseClass` belongs as shown below:  ``` int getHazelcastTypeId(const MyClass*); ```  This function should return the same ID with its serializer. This ID is used to determine which serializer needs to be used for your classes.   After you implement your serializer, you can register it using `SerializationConfig` as shown below:  ``` clientConfig.getSerializationConfig(). registerSerializer(boost::shared_ptr&lt;hazelcast::client:: serialization::SerializerBase&gt;(new MyCustomSerializer()); ```  "
});

documentTitles["index.html#raw-pointer-api"] = "Raw Pointer API";
index.add({
    url: "index.html#raw-pointer-api",
    title: "Raw Pointer API",
    body: "## Raw Pointer API  When using C++ client you can have the ownership of raw pointers for the objects you create and return. This allows you to keep the objects in your library/application without any need for copy.  For each container you can use the adapter classes, whose names start with `RawPointer`, to access the raw pointers of the created objects. These adapter classes are found in `hazelcast::client::adaptor` namespace and listed below:  - `RawPointerList` - `RawPointerQueue` - `RawPointerTransactionalMultiMap` - `RawPointerMap` - `RawPointerSet` - `RawPointerTransactionalQueue` - `RawPointerMultiMap` - `RawPointerTransactionalMap`  These are adapter classes and they do not create new structures. You just provide the legacy containers as parameters and then you can work with these raw capability containers freely. An example usage of `RawPointerMap` is shown below:  ``` hazelcast::client::IMap&lt;std::string, std::string&gt; m = hz.getMap&lt;std::string, std::string&gt;(\&quot;map\&quot;); hazelcast::client::adaptor::RawPointerMap&lt;std::string, std::string&gt; map(m); map.put(\&quot;1\&quot;, \&quot;Tokyo\&quot;); map.put(\&quot;2\&quot;, \&quot;Paris\&quot;); map.put(\&quot;3\&quot;, \&quot;New York\&quot;); std::cout &lt;&lt; \&quot;Finished loading map\&quot; &lt;&lt; std::endl;  std::auto_ptr&lt;hazelcast::client::DataArray&lt;std::string&gt; &gt; vals = map.values(); std::auto_ptr&lt;hazelcast::client::EntryArray&lt;std::string, std::string&gt; &gt; entries = map.entrySet();  std::cout &lt;&lt; \&quot;There are \&quot; &lt;&lt; vals-&gt;size() &lt;&lt; \&quot; values in the map\&quot; &lt;&lt; std::endl; std::cout &lt;&lt; \&quot;There are \&quot; &lt;&lt; entries-&gt;size() &lt;&lt; \&quot; entries in the map\&quot; &lt;&lt; std::endl;  for (size_t i = 0; i &lt; entries-&gt;size(); ++i) {    const std::string * key = entries-&gt;getKey(i);       if ((std::string *) NULL == key) { 			std::cout &lt;&lt; \&quot;The key at index \&quot; &lt;&lt; i &lt;&lt; \&quot; is NULL\&quot; &lt;&lt; std::endl;         } else {             std::auto_ptr&lt;std::string&gt; val = entries-&gt;releaseValue(i);             std::cout &lt;&lt; \&quot;(Key, Value) for index \&quot; &lt;&lt; i &lt;&lt; \&quot; is: (\&quot; &lt;&lt; *key &lt;&lt; \&quot;, \&quot; &lt;&lt;                 (val.get() == NULL ? \&quot;NULL\&quot; : *val) &lt;&lt; \&quot;)\&quot; &lt;&lt; std::endl;         }     }     std::cout &lt;&lt; \&quot;Finished\&quot; &lt;&lt; std::endl; ```  Raw pointer API uses the DataArray and EntryArray interfaces which allow late deserialization of objects. The entry in the returned array is deserialized only when it is accessed. Please see the example code below:  ``` // No deserialization here std::auto_ptr&lt;hazelcast::client::DataArray&lt;std::string&gt; &gt; vals = map.values();   // deserializes the item at index 0 assuming that there are at least 1 items in the array const std::string *value = vals-&gt;get(0);  // no deserialization here since it was already de-serialized value = vals-&gt;get(0);  // no deserialization here since it was already de-serialized value = (*vals)[0];  // releases the value so that you can keep this object pointer in your application at some other place std::auto_ptr&lt;std::string&gt; releasedValue = vals-&gt;release(0);  // deserialization occurs again since the value was released already value = vals-&gt;get(0); ```  Using raw pointer based API may improve performance if you are using the API to return multiple values such as values, keySet, and entrySet. In this case, cost of deserialization is delayed until the item is actually accessed.  "
});

documentTitles["index.html#query-api"] = "Query API";
index.add({
    url: "index.html#query-api",
    title: "Query API",
    body: "## Query API  C++ client API allows you to query map values, keys and entries using predicates. It also allows you to use Hazelcast Map's `executeOnKey` and `executeOnEntries` methods with predicates. You can run a processor on a subset of entries with these methods.   You can add entry listeners with predicates using C++ client API. By this way, only the events for the selected subset of entries matching the query criteria are received by your listener.  C++ client API provides a rich set of built-in predicates as supported by the Java client. You can create your own predicates by implementing `Predicate` interfaces both at the C++ client side and server side. Built-in predicates are listed below:  - `AndPredicate` - `EqualPredicate`  - `ILikePredicate` - `LikePredicate` - `OrPredicate` - `TruePredicate` - `BetweenPredicate`  - `FalsePredicate` - `InPredicate` - `NotEqualPredicate` - `PagingPredicate` - `RegexPredicate` - `GreaterLessPredicate` - `InstanceOfPredicate` - `NotPredicate` - `SqlPredicate`  An example query is shown in the following snippet:  ``` IMap&lt;int, int&gt; intMap = client.getMap&lt;int, int&gt;(\&quot;testValuesWithPredicateIntMap\&quot;); adaptor::RawPointerMap&lt;int, int&gt; rawMap(intMap); // ... // BetweenPredicate // 5 &lt;= key &lt;= 10 valuesArray = rawMap.values(query::BetweenPredicate&lt;int&gt;(query::QueryConstants::getKeyAttributeName(), 5, 10)); ```  This example query returns the values between 5 and 10, inclusive. You can find the examples of each built-in predicate in `distributed-map/query` folder of `examples`.   ![image](images/NoteSmall.jpg) ***NOTE:*** *API that returns pointers may return null pointers for null values. You need to check for null values.*  "
});

documentTitles["index.html#c-client-code-examples"] = "C++ Client Code Examples";
index.add({
    url: "index.html#c-client-code-examples",
    title: "C++ Client Code Examples",
    body: "## C++ Client Code Examples  You can try the following C++ client code examples. You need to have a Hazelcast client member running for the code examples to work.   "
});

documentTitles["index.html#c-client-map-example"] = "C++ Client Map Example";
index.add({
    url: "index.html#c-client-map-example",
    title: "C++ Client Map Example",
    body: "### C++ Client Map Example  ```cpp #include &lt;hazelcast/client/HazelcastAll.h&gt; #include &lt;iostream&gt;  using namespace hazelcast::client;  int main() {   ClientConfig clientConfig;   Address address( \&quot;localhost\&quot;, 5701 );   clientConfig.addAddress( address );    HazelcastClient hazelcastClient( clientConfig );    IMap&lt;int,int&gt; myMap = hazelcastClient.getMap&lt;int ,int&gt;( \&quot;myIntMap\&quot; );   myMap.put( 1,3 );   boost::shared_ptr&lt;int&gt; value = myMap.get( 1 );   if( value.get() != NULL ) {     //process the item   }    return 0; } ```  "
});

documentTitles["index.html#c-client-queue-example"] = "C++ Client Queue Example";
index.add({
    url: "index.html#c-client-queue-example",
    title: "C++ Client Queue Example",
    body: "### C++ Client Queue Example  ```cpp #include &lt;hazelcast/client/HazelcastAll.h&gt; #include &lt;iostream&gt; #include &lt;string&gt;  using namespace hazelcast::client;  int main() {   ClientConfig clientConfig;   Address address( \&quot;localhost\&quot;, 5701 );   clientConfig.addAddress( address );    HazelcastClient hazelcastClient( clientConfig );    IQueue&lt;std::string&gt; queue = hazelcastClient.getQueue&lt;std::string&gt;( \&quot;q\&quot; );   queue.offer( \&quot;sample\&quot; );   boost::shared_ptr&lt;std::string&gt; value = queue.poll();   if( value.get() != NULL ) {     //process the item   }   return 0; } ```  "
});

documentTitles["index.html#c-client-entry-listener-example"] = "C++ Client Entry Listener Example";
index.add({
    url: "index.html#c-client-entry-listener-example",
    title: "C++ Client Entry Listener Example",
    body: "#### C++ Client Entry Listener Example  ```cpp #include \&quot;hazelcast/client/ClientConfig.h\&quot; #include \&quot;hazelcast/client/EntryEvent.h\&quot; #include \&quot;hazelcast/client/IMap.h\&quot; #include \&quot;hazelcast/client/Address.h\&quot; #include \&quot;hazelcast/client/HazelcastClient.h\&quot; #include &lt;iostream&gt; #include &lt;string&gt;  using namespace hazelcast::client;  class SampleEntryListener {   public:    void entryAdded( EntryEvent&lt;std::string, std::string&gt; &amp;event ) {     std::cout &lt;&lt; \&quot;entry added \&quot; &lt;&lt;  event.getKey() &lt;&lt; \&quot; \&quot;         &lt;&lt; event.getValue() &lt;&lt; std::endl;   };    void entryRemoved( EntryEvent&lt;std::string, std::string&gt; &amp;event ) {     std::cout &lt;&lt; \&quot;entry added \&quot; &lt;&lt;  event.getKey() &lt;&lt; \&quot; \&quot;          &lt;&lt; event.getValue() &lt;&lt; std::endl;   }    void entryUpdated( EntryEvent&lt;std::string, std::string&gt; &amp;event ) {     std::cout &lt;&lt; \&quot;entry added \&quot; &lt;&lt;  event.getKey() &lt;&lt; \&quot; \&quot;          &lt;&lt; event.getValue() &lt;&lt; std::endl;   }    void entryEvicted( EntryEvent&lt;std::string, std::string&gt; &amp;event ) {     std::cout &lt;&lt; \&quot;entry added \&quot; &lt;&lt;  event.getKey() &lt;&lt; \&quot; \&quot;          &lt;&lt; event.getValue() &lt;&lt; std::endl;   } };   int main( int argc, char **argv ) {   ClientConfig clientConfig;   Address address( \&quot;localhost\&quot;, 5701 );   clientConfig.addAddress( address );    HazelcastClient hazelcastClient( clientConfig );    IMap&lt;std::string,std::string&gt; myMap = hazelcastClient       .getMap&lt;std::string ,std::string&gt;( \&quot;myIntMap\&quot; );   SampleEntryListener *  listener = new SampleEntryListener();    std::string id = myMap.addEntryListener( *listener, true );   // Prints entryAdded   myMap.put( \&quot;key1\&quot;, \&quot;value1\&quot; );   // Prints updated   myMap.put( \&quot;key1\&quot;, \&quot;value2\&quot; );   // Prints entryRemoved   myMap.remove( \&quot;key1\&quot; );   // Prints entryEvicted after 1 second   myMap.put( \&quot;key2\&quot;, \&quot;value2\&quot;, 1000 );    // WARNING: deleting listener before removing it from Hazelcast leads to crashes.   myMap.removeEntryListener( id );      // listen using predicates   // only listen the events for entries which has the value that matches the    // string \&quot;%VALue%1%\&quot;, i.e. any string containing the text value1 case insensitive   id = myMap.addEntryListener(*listener, query::ILikePredicate(         query::QueryConstants::getValueAttributeName(), \&quot;%VALue%1%\&quot;), true);      // this will generate an event   myMap.put(\&quot;key1\&quot;, \&quot;my__value1_new\&quot; );      sleep(1);        myMap.removeEntryListener( id );        // Delete listener after removing it from Hazelcast.   delete listener;   return 0; }; ```  "
});

documentTitles["index.html#c-client-serialization-example"] = "C++ Client Serialization Example";
index.add({
    url: "index.html#c-client-serialization-example",
    title: "C++ Client Serialization Example",
    body: "### C++ Client Serialization Example  Assume that you have the following two classes in Java and you want to use them with a C++ client.   ```java class Foo implements Serializable {   private int age;   private String name; }  class Bar implements Serializable {   private float x;   private float y; }  ```  **First**, let them implement `Portable` or `IdentifiedDataSerializable` as shown below.  ```java class Foo implements Portable {   private int age;   private String name;    public int getFactoryId() {     // a positive id that you choose     return 123;   }    public int getClassId() {     // a positive id that you choose     return 2;        }    public void writePortable( PortableWriter writer ) throws IOException {     writer.writeUTF( \&quot;n\&quot;, name );     writer.writeInt( \&quot;a\&quot;, age );   }    public void readPortable( PortableReader reader ) throws IOException {     name = reader.readUTF( \&quot;n\&quot; );     age = reader.readInt( \&quot;a\&quot; );   } }  class Bar implements IdentifiedDataSerializable {   private float x;   private float y;    public int getFactoryId() {     // a positive id that you choose     return 4;        }    public int getId() {     // a positive id that you choose     return 5;       }    public void writeData( ObjectDataOutput out ) throws IOException {     out.writeFloat( x );     out.writeFloat( y );   }    public void readData( ObjectDataInput in ) throws IOException {     x = in.readFloat();     y = in.readFloat();   } } ```  **Then**, implement the corresponding classes in C++ with same factory and class ID as shown below.  ```cpp class Foo : public Portable {   public:   int getFactoryId() const {     return 123;   };    int getClassId() const {     return 2;   };    void writePortable( serialization::PortableWriter &amp;writer ) const {     writer.writeUTF( \&quot;n\&quot;, name );     writer.writeInt( \&quot;a\&quot;, age );   };    void readPortable( serialization::PortableReader &amp;reader ) {     name = reader.readUTF( \&quot;n\&quot; );     age = reader.readInt( \&quot;a\&quot; );   };    private:   int age;   std::string name; };  class Bar : public IdentifiedDataSerializable {   public:   int getFactoryId() const {     return 4;   };    int getClassId() const {     return 2;   };    void writeData( serialization::ObjectDataOutput&amp; out ) const {     out.writeFloat(x);     out.writeFloat(y);   };    void readData( serialization::ObjectDataInput&amp; in ) {     x = in.readFloat();     y = in.readFloat();   };      private:   float x;   float y; }; ```  Now, you can use the classes `Foo` and `Bar` in distributed structures. For example, you can use as Key or Value of `IMap` or as an Item in `IQueue`. 	       "
});

documentTitles["index.html#glossary"] = "Glossary";
index.add({
    url: "index.html#glossary",
    title: "Glossary",
    body: "# Glossary  Term|Definition :-|:- **2-phase Commit**|2-phase commit protocol is an atomic commitment protocol for distributed systems. It consists of two phases: commit-request and commit. In commit-request phase, transaction manager coordinates all of the transaction resources to commit or abort. In commit-phase, transaction manager decides to finalize operation by committing or aborting according to the votes of the each transaction resource. **ACID**|A set of properties (Atomicity, Consistency, Isolation, Durability) guaranteeing that transactions are processed reliably. Atomicity requires that each transaction be all or nothing (i.e. if one part of the transaction fails, the entire transaction will fail). Consistency ensures that only valid data following all rules and constraints is written. Isolation ensures that transactions are securely and independently processed at the same time without interference (and without transaction ordering). Durability means that once a transaction has been committed, it will remain so, no matter if there is a power loss, crash, or error. **Cache**|A high-speed access area that can be either a reserved section of main memory or storage device.  **Garbage Collection**|Garbage collection is the recovery of storage that is being used by an application when that application no longer needs the storage. This frees the storage for use by other applications (or processes within an application). It also ensures that an application using increasing amounts of storage does not reach its quota. Programming languages that use garbage collection are often interpreted within virtual machines like the JVM. The environment that runs the code is also responsible for garbage collection. **Hazelcast Cluster**|A virtual environment formed by Hazelcast members communicating with each other in the cluster. **Hazelcast Partitions**|Memory segments containing the data. Hazelcast is built-on the partition concept, it uses partitions to store and process data. Each partition can have hundreds or thousands of data entries depending on your memory capacity. You can think of a partition as a block of data. In general and optimally, a partition should have a maximum size of 50-100 Megabytes. **IMDG**|An in-memory data grid (IMDG) is a data structure that resides entirely in memory, and is distributed among many members in a single location or across multiple locations. IMDGs can support thousands of in-memory data updates per second, and they can be clustered and scaled in ways that support large quantities of data. **Invalidation**|The process of marking an object as being invalid across the distributed cache. **Java heap**|Java heap is the space that Java can reserve and use in memory for dynamic memory allocation. All runtime objects created by a Java application are stored in heap. By default, the heap size is 128 MB, but this limit is reached easily for business applications. Once the heap is full, new objects cannot be created and the Java application shows errors. **LRU, LFU**|LRU and LFU are two of eviction algorithms. LRU is the abbreviation for Least Recently Used. It refers to entries eligible for eviction due to lack of interest by applications. LFU is the abbreviation for Least Frequently Used. It refers to the entries eligible for eviction due to having the lowest usage frequency. **Member**|A Hazelcast instance. Depending on your Hazelcast usage, it can refer to a server or a Java virtual machine (JVM). Members belong to a Hazelcast cluster. Members are also referred as member nodes, cluster members, or Hazelcast members. **Multicast**|A type of communication where data is addressed to a group of destination members simultaneously. **Near Cache**|A caching model. When near cache is enabled, an object retrieved from a remote member is put into the local cache and the future requests made to this object will be handled by this local member. For example, if you have a map with data that is mostly read, then using near cache is a good idea. **NoSQL**|\&quot;Not Only SQL\&quot;. A database model that provides a mechanism for storage and retrieval of data that is tailored in means other than the tabular relations used in relational databases. It is a type of database which does not adhering to the traditional relational database management system (RDMS) structure. It is not built on tables and does not employ SQL to manipulate data. It also may not provide full ACID guarantees, but still has a distributed and fault tolerant architecture. **OSGI**|Formerly known as the Open Services Gateway initiative, it describes a modular system and a service platform for the Java programming language that implements a complete and dynamic component model. **Race Condition**|This condition occurs when two or more threads can access shared data and they try to change it at the same time. **RSA**|An algorithm developed by Rivest, Shamir and Adleman to generate, encrypt and decrypt keys for secure data transmissions.  **Serialization**|Process of converting an object into a stream of bytes in order to store the object or transmit it to memory, a database, or a file. Its main purpose is to save the state of an object in order to be able to recreate it when needed. The reverse process is called deserialization. **Split Brain**|Split brain syndrome, in a clustering context, is a state in which a cluster of members gets divided (or partitioned) into smaller clusters of members, each of which believes it is the only active cluster. **Transaction**|Means a sequence of information exchange and related work (such as data store updating) that is treated as a unit for the purposes of satisfying a request and for ensuring data store integrity.        "
});


